#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(push_constant, std140) uniform PushConstants {
    layout(offset = 0) uint frame_index;
    layout(offset = 4) float time;

    layout(offset = 8) float bass_energy;
    layout(offset = 12) bool is_beat;
    layout(offset = 16) uint real_beats;

    layout(offset = 20) float bpm_confidence;
    layout(offset = 24) float bpm_period;
    layout(offset = 28) int beat_index;
    layout(offset = 32) float beat_fract;
} constants;

layout(rgba32f, binding = 0) uniform image2D canvas;
layout(rgba32f, binding = 1) uniform image2D accent;

layout(binding = 2) buffer Signal {
    int size;
    int write_index;
    float data[];
} bass_signal;

layout(binding = 3) buffer Dft {
    int size;
    float data[];
} signal_dft;

const float TWO_PI = 6.28318530718;

vec2 ndc_to_tex(vec2 ndc) {
    return 0.5 * ndc + 0.5;
}

float time_sin(float factor) {
    return sin(constants.time * factor);
}

vec2 time_sin2(float a, float b) {
    return vec2(time_sin(a), time_sin(b));
}

float len2(vec2 v) {
    return dot(v, v);
}

mat2 rotation_2d(float angle) {
    float c = cos(angle);
    float s = sin(angle);
    return mat2(
        c, -s,
        s,  c
    );
}

vec3 neon_color(float time) {
    float h = fract(time);
    float s = 1.0;
    float v = 1.0;

    float r = abs(h * 6.0 - 3.0) - 1.0;
    float g = 2.0 - abs(h * 6.0 - 2.0);
    float b = 2.0 - abs(h * 6.0 - 4.0);
    return clamp(vec3(r, g, b), 0.0, 1.0);
}

float grid(vec2 xy, ivec2 size, ivec2 pos) {
    vec2 cell_size = 2.0 / vec2(size);
    vec2 center = (vec2(pos) + 0.5) * cell_size - 1.0;

    vec2 d = abs(xy - center) - 0.45 * cell_size;
    float sdf = length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);

    return clamp(ceil(-sdf), 0.0, 1.0);
}

// float spinner(vec2 xy, float pct) {
// float sdArc( in vec2 p, in vec2 sc, in float ra, float rb )
// {
//     // sc is the sin/cos of the arc's aperture
//     p.x = abs(p.x);
//     return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) :
//                                   abs(length(p)-ra)) - rb;
// }
// }

float circle(vec2 xy, vec2 pos, float radius) {
    return float((len2(xy - pos) + 0.0001) < radius * radius);
}

vec3 quad_lasers(vec2 xy) {
    int i = int(floor(constants.beat_fract / 0.25));
    return grid(xy, ivec2(4, 5), ivec2(i, 0)) * vec3(0.22, 1.0, 0.07);
}

vec3 beat_grid(vec2 xy) {
    int i = constants.beat_index & 3;
    return grid(xy, ivec2(4, 5), ivec2(i, 4)) * vec3(1.0, 0.35, 0.0);
}

vec3 bar_grid(vec2 xy) {
    int i = (constants.beat_index >> 2) & 7;
    return grid(xy, ivec2(8, 10), ivec2(i, 9)) * vec3(0.0, 0.72, 1.0);
}

vec3 beat_bouncer(vec2 xy) {
    mat2 rot = rotation_2d(constants.time);

    int beat_index = constants.beat_index;
    vec2 pos = vec2(
        (beat_index & 0x1) != 0 ? constants.beat_fract - 0.5 : 0.5 - constants.beat_fract,
        0.0
    ) * 2;

    vec2 d = (rot * xy) - pos;
    float sdf = len2(d);

    return clamp(1.0 - 500.0 * sdf, 0.0, 1.0) * vec3((beat_index & 1) == 0, (beat_index & 2) == 0, (beat_index & 4) == 0);
}

vec3 dft_raw(vec2 xy) {
    vec2 tex = ndc_to_tex(xy * 2.0);
    float x = tex.x - 0.5;

    float dft_index_f = abs(x) * signal_dft.size;
    int dft_index = int(dft_index_f);

    if (abs(x) > 1.0) {
        return vec3(0.0);
    }

    float inv_y = abs(0.5 - tex.y);

    float min_db = -20.0;
    float db_range = 120.0;
    float db = (signal_dft.data[dft_index] - min_db) / db_range;

    vec3 value = db > inv_y ? neon_color(0.5 * x + 0.3 * constants.time + tex.y) : vec3(0.0);

    return value;
}

vec3 dft(vec2 ndc_aspect) {
    float rotate_by = (TWO_PI + time_sin(2.45)) * time_sin(0.3459872);
    mat2x2 rotation = rotation_2d(rotate_by);
    vec2 rotated = rotation * ndc_aspect;
    vec2 zoomed = rotated * (3.0 + 0.5 * time_sin(0.92834987));
    return dft_raw(zoomed);
}


float linger(float t) {
    float x = abs(fract(0.3 * t) * 2.0 - 1.0);
    return smoothstep(0.4, 0.6, x);
}

float linger_long(float t) {
    float x = abs(fract(0.3 * t) * 2.0 - 1.0);
    return smoothstep(0.15, 0.85, x);
}

vec3 signal_line(vec2 ndc) {
    float x = abs(ndc.x);
    float y = -ndc.y;
    int hsize = bass_signal.size / 4;
    int index = int(bass_signal.write_index - 1 - x * hsize);
    index = index + (index < 0 ? bass_signal.size : 0);

    float value = bass_signal.data[index];
    float close1 = abs(y) < value ? 1.0 : 0.0;
    float close2 = abs(abs(y) - value) < 0.01 ? 1.0 : 0.0;

    float close = mix(close1, close2, linger(0.139847 * constants.time));

    return neon_color(value + 0.5 * index / 44100.0) * vec3(close);
}

void main() {
    ivec2 ipixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 iimage_size = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

    vec2 pixel_coords = vec2(ipixel_coords) + 0.5;
    vec2 ndc = 2 * pixel_coords / vec2(iimage_size) - 1;

    float average_size = 0.5 * float(iimage_size.x + iimage_size.y);
    vec2 ndc_aspect = vec2(iimage_size) * ndc / average_size;

    // Circle in center.
    float bass_pump_color_index = 0.25 * constants.time / constants.bpm_period;
    vec3 bass_pump_color = neon_color(bass_pump_color_index);
    float radius = min(1.5 * constants.bass_energy + 0.05, 0.2);
    vec3 bass_pump = circle(ndc_aspect + 0.5 * time_sin2(0.113802934, 0.238749238), vec2(0.0), radius) * bass_pump_color;

    // Ticker displays.
    vec3 beat_display = beat_grid(ndc_aspect * 1.5) + bar_grid(ndc_aspect * 1.5);
    // vec3 bouncer = beat_bouncer(ndc_aspect);
    vec3 dft_barrel = dft(ndc_aspect);
    vec3 line = signal_line(ndc);

    // Current image.
    vec3 canvas_color = 0.999 * mix(dft_barrel, line, linger(0.021293874 * constants.time));
    vec3 accent_color = bass_pump; // DISLIKED! + bouncer;

    imageStore(canvas, ipixel_coords, vec4(canvas_color, 1));
    imageStore(accent, ipixel_coords, vec4(accent_color, 1));
}
