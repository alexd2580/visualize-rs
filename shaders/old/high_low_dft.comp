#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(push_constant, std140) uniform PushConstants {
    layout(offset = 0) uint frame_index;
} constants;

layout(binding = 0) buffer Signal {
    int size;
    int position;
    float data[];
} signal;

layout(binding = 1) buffer LowPass {
    int size;
    int position;
    float data[];
} low_pass;

layout(binding = 2) buffer HighPass {
    int size;
    int position;
    float data[];
} high_pass;

layout(binding = 3) buffer Dft {
    int size;
    float data[];
} signal_dft;

layout(binding = 4) buffer DftLowPass {
    int size;
    float data[];
} low_pass_dft;

layout(binding = 5) buffer DftHighPass {
    int size;
    float data[];
} high_pass_dft;

layout(rgba32f, binding = 6) uniform image2D intermediate;
layout(rgba32f, binding = 7) uniform image2D highlights;

const float eps = 0.002;

int pcm_index(float x) {
    int index_from_end = int((1 - x) * 0.3 * float(signal.size));
    int pcm_index = (signal.size + (signal.position - index_from_end)) % signal.size;
    return pcm_index - pcm_index % 200;
}

vec3 pcm_raw(vec2 pos) {
    int index = pcm_index(pos.x);
    float max_val = 0;
    for (int i = 0; i < 200; i++) {
        max_val = max(abs(signal.data[(index + i) % signal.size]), max_val);
    }
    float y = pos.y * 2 - 1;
    float color = max_val > abs(y) - eps ? 1.0 : 0.0;
    return vec3(color, 0, 0);
}

vec3 pcm_low(vec2 pos) {
    int index = pcm_index(pos.x);
    float max_val = 0;
    for (int i = 0; i < 200; i++) {
        max_val = max(abs(low_pass.data[(index + i) % signal.size]), max_val);
    }
    float y = pos.y * 2 - 1;
    float color = max_val > abs(y) - eps ? 1.0 : 0.0;
    return vec3(0, color, 0);
}

vec3 pcm_high(vec2 pos) {
    int index = pcm_index(pos.x);
    float max_val = 0;
    for (int i = 0; i < 200; i++) {
        max_val = max(abs(signal.data[(index + i) % signal.size] - low_pass.data[(index + i) % signal.size]), max_val);
    }
    float y = pos.y * 2 - 1;
    float color = max_val > abs(y) - eps ? 1.0 : 0.0;
    return vec3(0, 0, color);
}

vec3 pcm_image(vec2 pos) {
    if (pos.y < 0.33333333) {
        return pcm_raw(vec2(pos.x, pos.y * 3));
    } else if (pos.y < 0.66666666) {
        float posy = (pos.y - 0.3333333) * 3;
        vec3 raw = pcm_raw(vec2(pos.x, posy));
        return raw + pcm_low(vec2(pos.x, posy));
    } else {
        float posy = (pos.y - 0.666666) * 3;
        vec3 raw = pcm_raw(vec2(pos.x, posy));
        return raw + pcm_high(vec2(pos.x, posy));
    }
}

int dft_index(float x) {
    return int((pow(3000, x) - 1) / (3000 - 1) * signal_dft.size);
    // int useless = 2;
    // float float_x = float(signal_dft.size - useless) * pow(x, 5);
    // return useless + int(round(float_x));
}

float dft_color(int index, float value, float y) {
    y = y * 2 - 1;
    float scale = (14 + 0.8 * index) / 15;
    return scale * value >= abs(y) - eps ? 1.0 : 0.0;
}

vec3 dft_raw(vec2 pos) {
    int index = dft_index(pos.x);
    float dft_value = signal_dft.data[index];
    return vec3(dft_color(index, dft_value, pos.y), 0, 0);
}

vec3 dft_low(vec2 pos) {
    int index = dft_index(pos.x);
    float dft_value = low_pass_dft.data[index];
    return vec3(0, dft_color(index, dft_value, pos.y), 0);
}

vec3 dft_high(vec2 pos) {
    int index = dft_index(pos.x);
    float dft_value = signal_dft.data[index] - low_pass_dft.data[index];
    return vec3(0, 0, dft_color(index, dft_value, pos.y));
}

vec3 dft_image(vec2 pos) {
    if (pos.y < 0.33333333) {
        return dft_raw(vec2(pos.x, pos.y * 3));
    } else if (pos.y < 0.66666666) {
        float posy = (pos.y - 0.3333333) * 3;
        vec3 raw = dft_raw(vec2(pos.x, posy));
        return raw + dft_low(vec2(pos.x, posy));
    } else {
        float posy = (pos.y - 0.666666) * 3;
        vec3 raw = dft_raw(vec2(pos.x, posy));
        return raw + dft_high(vec2(pos.x, posy));
    }
}

vec3 main_image(vec2 pos) {
    if (pos.x < 0.5) {
        return pcm_image(vec2(pos.x * 2, pos.y));
    } else {
        return dft_image(vec2((pos.x - 0.5) * 2, pos.y));
    }
}

void main() {
    ivec2 iimage_size = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    ivec2 ipixel_coords = ivec2(gl_GlobalInvocationID.xy);
    vec2 pixel_coords = vec2(ipixel_coords) / iimage_size;

    ivec2 istore_coords = ivec2(ipixel_coords.x, iimage_size.y - 1 - ipixel_coords.y);
    vec3 image = main_image(pixel_coords);
    vec3 threshold_weights = vec3(0.2126, 0.7152, 0.0722);
    threshold_weights = vec3(10);
    vec3 highlight = dot(image, threshold_weights) > 1.0 ? image : vec3(0);

    imageStore(intermediate, istore_coords, vec4(image, 1));
    imageStore(highlights, istore_coords, vec4(highlight, 1));
}
