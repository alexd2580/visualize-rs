#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(push_constant, std140) uniform PushConstants {
    layout(offset = 0) uint frame_index;
    layout(offset = 4) bool is_beat;
    layout(offset = 8) uint beat_count;
    layout(offset = 12) float now;
    layout(offset = 16) float last_beat;
    layout(offset = 20) float next_beat;
    layout(offset = 24) bool matches_bpm;
};

layout(rgba32f, binding = 0) uniform image2D intermediate;
layout(rgba32f, binding = 1) uniform image2D bloom_hv;
layout(binding = 2) uniform sampler2D result_prev;
layout(rgba32f, binding = 3) uniform image2D result;
layout(rgba32f, binding = 4) uniform image2D present;

vec3 make_color(float x) {
    return vec3(sin(x), sin(x + 3.1415 * 2.0 / 3.0), sin(x + 3.1415 * 4.0 / 3.0)); //  / 2.0 + 0.5;
}

void main() {
    ivec2 iimage_size = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    ivec2 ipixel = ivec2(gl_GlobalInvocationID.xy);
    vec2 pixel = vec2(ipixel) / iimage_size;

    vec3 color = imageLoad(intermediate, ipixel).rgb;
    vec3 bloom = imageLoad(bloom_hv, ipixel).rgb;
    vec3 active_image = color + bloom;

    vec3 prev = texture(result_prev, pixel + 0.005 * vec2(sin(0.002 * frame_index), cos(0.001999999 * frame_index))).rgb;
    vec3 store_prev = 0.96 * prev + 0.04 * active_image;
    imageStore(result, ipixel, vec4(store_prev, 1));

    // additive blending
    // color += bloom;

    // // tone mapping
    // float exposure = 1.0;
    // vec3 result = vec3(1.0) - exp(-color * exposure);

    // // also gamma correct while we're at it
    // const float gamma = 2.2;
    // result = pow(result, vec3(1.0 / gamma));

    // float since_beat = now - last_beat;
    // since_beat /= next_beat - last_beat;
    // float until_beat = next_beat - now;
    // until_beat /= next_beat - last_beat;
    // vec3 beat_color = 0.5 * max(vec3(0), vec3(since_beat, 0, until_beat));

    vec3 beat_color = (matches_bpm) ? make_color(float(beat_count)): vec3(0.0);

    vec3 store_present = active_image + 0.4 * prev + 0.4 * beat_color;
    imageStore(present, ipixel, vec4(store_present, 1));
}
