#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(push_constant, std140) uniform PushConstants {
    layout(offset = 0) uint frame_index;
    layout(offset = 4) float time;

    layout(offset = 8) float bass_energy;
    layout(offset = 12) float cumulative_bass_energy;
    layout(offset = 16) bool is_beat;
    layout(offset = 20) uint real_beats;

    layout(offset = 24) float bpm_confidence;
    layout(offset = 28) float bpm_period;
    layout(offset = 32) int beat_index;
    layout(offset = 36) float beat_fract;
} constants;

layout(binding = 0) uniform sampler2D canvas;
layout(binding = 1) uniform sampler2D accent;
layout(rgba32f, binding = 2) uniform image2D frame;
layout(binding = 3) uniform sampler2D frame_prev;
layout(rgba32f, binding = 4) uniform image2D present;

const float TWO_PI = 6.28318530718;
const float PI_OVER_6 = 0.866025403;

float len2(vec2 v) {
    return dot(v, v);
}

vec2 ndc_to_tex(vec2 ndc) {
    return 0.5 * ndc + 0.5;
}

vec2 tex_to_ndc(vec2 tex) {
    return 2.0 * tex - 1.0;
}

vec2 pixel_to_tex(ivec2 pixel, ivec2 size) {
    // +0.5 because querying the texture using sampler we get floating pixel coordinates.
    return (vec2(pixel) + 0.5) / vec2(size);
}

vec2 pixel_to_ndc(ivec2 pixel, ivec2 size) {
    return tex_to_ndc(pixel_to_tex(pixel, size));
}

mat2 rotation_2d(float angle) {
    float c = cos(angle);
    float s = sin(angle);
    return mat2(
        c, -s,
        s,  c
    );
}

float time_sin(float factor) {
    return sin(factor * TWO_PI * constants.time);
}

vec2 time_sin2(float a, float b) {
    return vec2(
        sin(a * TWO_PI * constants.time),
        cos(b * TWO_PI * constants.time)
    );
}

vec2 blackhole(vec2 v) {
    vec2 black_hole = 0.5 * time_sin2(0.113802934, 0.238749238);
    vec2 delta = black_hole - v;
    float distance = length(delta);
    delta /= distance;
    // `-` because by "repelling" text coords, you're actually attracting the content.
    return v - 0.01 * delta / distance;
}

vec3 load_canvas(vec2 ndc, out float mask) {
    // Overlayed on top of previous canvas.
    mat2 rotate_canvas = rotation_2d(sin(constants.time) * constants.bass_energy);
    vec2 rotated = rotate_canvas * ndc;
    vec2 scale = 1.0 - vec2(constants.bass_energy);
    vec2 canvas_coords = rotated * scale;

    vec3 canvas_color = texture(canvas, ndc_to_tex(canvas_coords)).rgb;
    vec3 canvas_color_b = texture(canvas, ndc_to_tex(vec2(0.9, 0.8) * canvas_coords)).rgb;

    mask = min(dot(canvas_color_b, canvas_color_b), 1.0);
    return canvas_color;
}

const float FLIGHT_ALPHA = 1.0;
const float FRACTAL_ALPHA = 0.90;
// const float FRACTAL_ALPHA = 0.6;

float linger(float t) {
    float x = abs(fract(0.3 * t) * 2.0 - 1.0);
    return smoothstep(0.3, 0.7, x);
}

vec2 fractal(vec2 xy) {
    mat2 rot2 = rotation_2d(-0.1 * constants.time + 0.0002 * constants.cumulative_bass_energy);

    int num_cycles = 7; //1 + int(constants.real_beats & 2);
    for (int i = 0; i < num_cycles; i++) {
        xy = abs(xy);
        xy -= 0.5 + 0.01 * i;
        xy *= 1.25;
        xy *= rot2 + 0.01 * i;
    }

    return xy;
}

vec3 load_prev_frame(vec2 ndc) {
    float transition = 0.05 * constants.time;
    float beta = linger(transition);

    vec2 scale = 1.0 + 0.02 * time_sin2(0.0123123, 0.0234892734);

    vec2 translate_flight = 0.01 * time_sin2(0.0293847987435, 0.0234567438598);
    vec2 prev_coords_flight = scale * ndc + translate_flight;

    vec2 translate_fractal = 0.01 * time_sin2(0.0293847987435, 0.0234567438598);
    vec2 prev_coords_fractal = fractal(ndc);

    vec2 prev_coords = mix(prev_coords_flight, prev_coords_fractal, beta);
    vec3 prev_color = texture(frame_prev, ndc_to_tex(prev_coords)).rgb;

    float alpha = mix(FLIGHT_ALPHA, FRACTAL_ALPHA, beta);
    return alpha * prev_color;
}

vec3 load_accent(vec2 ndc) {
    return texture(accent, ndc_to_tex(ndc)).rgb;
}

// vec3 load_prev_frame_new(vec2 ndc) {
//     float transition = 0.1 * constants.time;
//     float bar = float(constants.beat_index >> 2);
//     vec2 scale = 1.0 + 0.01 * time_sin2(0.3453487435, 0.987435234, bar);
//     vec2 translate_kaleidoscope = 0.01 * time_sin2(0.293847987435, 0.234567438598, 0.0);
//
//     vec2 before = ndc + translate_kaleidoscope;
//     float len_before = length(before);
//
//     float angle = acos(before.x / len_before) * before.y < 0 ? -1.0 : 1.0;
//     float new_angle = fract(angle * 4) / 4;
//
//     vec2 after = fract(len_before) * vec2(cos(new_angle), sin(new_angle));
//
//     vec2 prev_coords_kaleidoscope = after;
//     vec3 prev_color = texture(frame_prev, ndc_to_tex(prev_coords_kaleidoscope)).rgb;
//     return 0.99 * prev_color;
// }

vec3 colorshift(vec2 ndc, vec3 color) {
    return color;
    float f = dot(ndc, ndc);
    return fract(
        color +
        0.01 * f * abs(vec3(sin(constants.time * 2.349587), sin(constants.time * 2.23894793), sin(constants.time * 2.982374)))
    );
}

void main() {
    ivec2 ipixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 iimage_size = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

    vec2 pixel_coords = vec2(ipixel_coords) + 0.0;
    vec2 ndc = 2.0 * pixel_coords / vec2(iimage_size) - 1.0;
    float average_size = 0.5 * float(iimage_size.x + iimage_size.y);
    vec2 ndc_aspect = vec2(iimage_size) * ndc / average_size;

    float canvas_mask;
    vec3 canvas_color = load_canvas(ndc, canvas_mask);
    vec3 frame_color = load_prev_frame(ndc);
    vec3 accent_color = load_accent(ndc);

    vec3 next_frame = 0.95 * (canvas_color + frame_color);
    // next_frame = colorshift(ndc, next_frame);

    vec3 next_present = canvas_color;
    next_present += (1.0 - canvas_mask) * (frame_color + accent_color);

    // next_present = canvas_color;
    // next_present = fract(0.99 * next_present);

    // vec3 sum_color = len_canvas > 0.001 ? (len_canvas > 0.5 ? canvas_color_larger : vec3(0)) : 0.99 * prev_color;
    // vec3 sum_color2 = len_canvas > 0.5 ? canvas_color : 0.99 * prev_color;

    imageStore(frame, ipixel_coords, vec4(next_frame, 1));
    imageStore(present, ipixel_coords, vec4(next_present, 1));


    // vec3 add_color = fract(constants.frame_index * 0.1203948230 * vec3(float(ipixel_coords.x) / iimage_size.x, float(ipixel_coords.y) / iimage_size.y, 0));
    //
    // if (constants.frame_index % 60 < 60) {
    //     imageStore(present, ipixel_coords, vec4(add_color, 1));
    // } else {
    //     imageStore(present, ipixel_coords, vec4(load_color, 1));
    // }
}
