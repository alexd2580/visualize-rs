#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(push_constant, std140) uniform PushConstants {
    layout(offset = 0) uint frame_index;
    layout(offset = 4) float time;

    layout(offset = 8) float bass_energy;
    layout(offset = 12) bool is_beat;
    layout(offset = 16) uint real_beats;

    layout(offset = 20) float bpm_confidence;
    layout(offset = 24) float bpm_period;
    layout(offset = 28) int quarter_beat_index;
    layout(offset = 32) float beat_fract;
} constants;

layout(binding = 0) uniform sampler2D canvas;
layout(rgba32f, binding = 1) uniform image2D frame;
// layout(rgba32f, binding = 2) uniform image2D frame_prev;
layout(binding = 2) uniform sampler2D frame_prev;
layout(rgba32f, binding = 3) uniform image2D present;

vec2 ndc_to_tex(vec2 ndc) {
    return 0.5 * ndc + 0.5;
}

vec2 tex_to_ndc(vec2 tex) {
    return 2.0 * tex - 1.0;
}

vec2 pixel_to_tex(ivec2 pixel, ivec2 size) {
    // +0.5 because querying the texture using sampler we get floating pixel coordinates.
    return (vec2(pixel) + 0.5) / vec2(size);
}

vec2 pixel_to_ndc(ivec2 pixel, ivec2 size) {
    return tex_to_ndc(pixel_to_tex(pixel, size));
}

mat2 rotation_2d(float angle) {
    float c = cos(angle);
    float s = sin(angle);
    return mat2(
        c, -s,
        s,  c
    );
}

void main() {
    ivec2 ipixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 iimage_size = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

    vec2 pixel_coords = vec2(ipixel_coords) + 0.5;
    vec2 ndc = 2.0 * pixel_coords / vec2(iimage_size) - 1.0;

    // Overlayed on top of previous canvas.
    mat2 rotate_canvas = rotation_2d(sin(constants.time) * constants.bass_energy);
    vec2 rotated = rotate_canvas * ndc;
    vec2 scale = 1.0 - vec2(constants.bass_energy);
    vec2 canvas_coords = rotated * scale;
    // canvas_coords = 0.5 * ndc + 0.5;
    vec3 canvas_color = texture(canvas, ndc_to_tex(canvas_coords)).rgb;
    vec3 canvas_color_larger = texture(canvas, ndc_to_tex(canvas_coords) / 0.01).rgb;
    // vec3 canvas_color = texture(canvas, ndc_to_tex(ndc)).rgb;

    float bar = float(constants.quarter_beat_index >> 4);
    vec2 flight_direction = vec2(
        sin(bar + 0.293847987435 * constants.time),
        cos(bar + 0.234567438598 * constants.time)
    );
    vec2 zoom = 1.0 + 0.01 * vec2(
        sin(0.293847987435 * constants.time),
        cos(0.234567438598 * constants.time)
    );
    vec2 prev_coords = zoom * ndc + 0.01 * flight_direction;
    vec3 prev_color = texture(frame_prev, ndc_to_tex(ndc)).rgb; // prev_coords

    float len_canvas = length(canvas_color);
    vec3 sum_color = len_canvas > 0.001 ? (len_canvas > 0.5 ? canvas_color_larger : vec3(0)) : 0.99 * prev_color;
    vec3 sum_color2 = len_canvas > 0.5 ? canvas_color : 0.99 * prev_color;
    // sum_color = prev_color;
    // if (length(ndc) > 0.2 && length(ndc) < 0.3) {
    //     sum_color += vec3(1.0, 0.0, 0.0);
    // }

    imageStore(frame, ipixel_coords, vec4(sum_color2, 1));
    imageStore(present, ipixel_coords, vec4(sum_color, 1));


    // vec3 add_color = fract(constants.frame_index * 0.1203948230 * vec3(float(ipixel_coords.x) / iimage_size.x, float(ipixel_coords.y) / iimage_size.y, 0));
    //
    // if (constants.frame_index % 60 < 60) {
    //     imageStore(present, ipixel_coords, vec4(add_color, 1));
    // } else {
    //     imageStore(present, ipixel_coords, vec4(load_color, 1));
    // }
}
